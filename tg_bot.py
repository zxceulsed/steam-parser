import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboard import main_menu, back_menu
from steam_parser import process_market_url, get_steam_cookies
import json

class Form(StatesGroup):
    waiting_link = State()
    waiting_float = State()
    waiting_percent = State()
    waiting_delete = State()
    waiting_cookies = State()
    
bot = Bot(token="5850044952:AAG8m316opUqrEDrbmRhOrg4kieHUZ-WwjE")
dp = Dispatcher()
monitoring_active = False

def load_skins():
    if not os.path.exists('links.txt'):
        return []
    with open('links.txt', 'r', encoding='utf-8') as f:
        return [line.strip().split('~|~') for line in f.readlines()]


def save_skins(skins):
    with open('links.txt', 'w', encoding='utf-8') as f:
        for skin in skins:
            f.write('~|~'.join(skin) + '\n')

def validate_cookies(data: list) -> bool:
    required_fields = {'name', 'value', 'domain'}
    for cookie in data:
        if not all(field in cookie for field in required_fields):
            return False
    return True

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üè∑Ô∏è –ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∫–∏–Ω–æ–≤ CS2\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@dp.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–Ω')
async def add_skin(message: Message, state: FSMContext):
    await state.set_state(Form.waiting_link)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∫–∏–Ω–∞ —Å Steam Market:",
        reply_markup=back_menu()
    )

@dp.message(Form.waiting_link)
async def process_link(message: Message, state: FSMContext):
    if '–Ω–∞–∑–∞–¥' in message.text.lower():
        await state.clear()
        return await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    
    if not message.text.startswith('https://steamcommunity.com/market'):
        return await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ Steam Market —Å—Å—ã–ª–∫—É!")
    
    await state.update_data(link=message.text)
    await state.set_state(Form.waiting_float)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω float –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n0.00-0.02",
        reply_markup=back_menu()
    )

@dp.message(Form.waiting_float)
async def process_float(message: Message, state: FSMContext):
    if '–Ω–∞–∑–∞–¥' in message.text.lower():
        await state.clear()
        return await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    
    try:
        min_float, max_float = map(float, message.text.split('-'))
        if min_float > max_float:
            return await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ!")
        
        await state.update_data(min_float=min_float, max_float=max_float)
        await state.set_state(Form.waiting_percent)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 20):",
            reply_markup=back_menu()
        )
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä: 0.00-0.02")

@dp.message(Form.waiting_percent)
async def process_percent(message: Message, state: FSMContext):
    try:
        percent = float(message.text)
        if percent <= 0:
            return await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
        
        data = await state.get_data()
        skins = load_skins()
        skins.append([data['link'], str(data['min_float']), str(data['max_float']), str(percent)])
        save_skins(skins)
        
        await message.answer(
            f"‚úÖ –°–∫–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–°—Å—ã–ª–∫–∞: {data['link']}\n"
            f"–î–∏–∞–ø–∞–∑–æ–Ω float: {data['min_float']}-{data['max_float']}\n"
            f"–ú–∞–∫—Å. –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã: {percent}%",
            reply_markup=main_menu()
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")

@dp.message(F.text == '–£–¥–∞–ª–∏—Ç—å —Å–∫–∏–Ω')
async def delete_skin(message: Message, state: FSMContext):
    skins = load_skins()
    if not skins:
        return await message.answer("üìÇ –°–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤ –ø—É—Å—Ç!")
    
    response = ["üóë –°–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"]
    for i, (link, min_float, max_float, percent) in enumerate(skins, 1):
        response.append(f"{i}. {link}\n–î–∏–∞–ø–∞–∑–æ–Ω: {min_float}-{max_float}\n–ü—Ä–æ—Ü–µ–Ω—Ç: {percent}%")
    
    await state.set_state(Form.waiting_delete)
    await message.answer('\n'.join(response) + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∫–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=back_menu())

@dp.message(Form.waiting_delete)
async def process_delete(message: Message, state: FSMContext):
    if '–Ω–∞–∑–∞–¥' in message.text.lower():
        await state.clear()
        return await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    
    try:
        index = int(message.text) - 1
        skins = load_skins()
        
        if 0 <= index < len(skins):
            deleted_skin = skins.pop(index)
            save_skins(skins)
            await message.answer(
                f"‚úÖ –°–∫–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:\n"
                f"{deleted_skin[0]}\n"
                f"–î–∏–∞–ø–∞–∑–æ–Ω: {deleted_skin[1]}-{deleted_skin[2]}",
                reply_markup=main_menu()
            )
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–∫–∏–Ω–∞!", reply_markup=main_menu())
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!", reply_markup=main_menu())

@dp.message(F.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–∏–Ω—ã')
async def view_skins(message: Message):
    skins = load_skins()
    if not skins:
        return await message.answer("üìÇ –°–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤ –ø—É—Å—Ç")
    
    response = ["üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∫–∏–Ω–æ–≤:"]
    for i, (link, min_float, max_float, percent) in enumerate(skins, 1):
        response.append(f"{i}. {link}\n–î–∏–∞–ø–∞–∑–æ–Ω float: {min_float}-{max_float}\n–ú–∞–∫—Å. –ø—Ä–æ—Ü–µ–Ω—Ç: {percent}%")
    
    await message.answer('\n'.join(response))

@dp.message(F.text == '–ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')
async def start_monitoring(message: Message):
    global monitoring_active
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—É–∫–∏
    cookies = get_steam_cookies()
    if not cookies:
        return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏—Ç–µ –∫—É–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é!")
    
    monitoring_active = True
    await message.answer("üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∫–∏–Ω–æ–≤... (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)")
    asyncio.create_task(check_skins_periodically(message))

async def check_skins_periodically(message: Message):
    global monitoring_active
    while monitoring_active:
        skins = load_skins()
        for skin_entry in skins:
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º 4 –∑–Ω–∞—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ 3
            url, min_float, max_float, max_percent = skin_entry
            result = await process_market_url(
                url, 
                float(min_float), 
                float(max_float),
                float(max_percent)  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤ –≤—ã–∑–æ–≤
            )
            if result:
                await message.answer(f"üéâ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∫–∏–Ω!\n{result}")
        await asyncio.sleep(300)

@dp.message(F.text == '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
async def back_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

@dp.message(F.text == '–û–±–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏')
async def update_cookies(message: Message, state: FSMContext):
    await state.set_state(Form.waiting_cookies)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª cookies.json —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫—É–∫–∞–º–∏:", reply_markup=back_menu())

@dp.message(Form.waiting_cookies, F.document)
async def handle_cookies_file(message: Message, state: FSMContext):
    try:
        file = await bot.get_file(message.document.file_id)
        await bot.download_file(file.file_path, destination="cookies.json")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON
        with open("cookies.json", 'r', encoding='utf-8') as f:
            cookies_data = json.load(f)  # –¢–µ–ø–µ—Ä—å json –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
            
            if not validate_cookies(cookies_data):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
        
        await message.answer("‚úÖ –ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=main_menu())
        
    except json.JSONDecodeError:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ JSON
        await message.answer("‚ùå –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON!", reply_markup=main_menu())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=main_menu())
    finally:
        await state.clear()


if __name__ == '__main__':
    dp.run_polling(bot)