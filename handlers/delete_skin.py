from aiogram import Dispatcher, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from states.user_states import Form
from keyboards.reply import back_menu
from services.storage import load_skins, save_skins


def register_delete_skin_handlers(dp: Dispatcher):
    @dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Å–∫–∏–Ω")
    async def delete_skin(message: Message, state: FSMContext):
        skins = load_skins()
        if not skins:
            await message.answer("üìÇ –°–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤ –ø—É—Å—Ç!")
            return
        lines = [
            f"{i+1}. {link} ‚Äî float {min_f}-{max_f}, % {pct}%"
            for i, (link, min_f, max_f, pct) in enumerate(skins)
        ]
        await state.set_state(Form.waiting_delete)
        await message.answer(
            "üóë –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∫–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n" + "\n".join(lines),
            reply_markup=back_menu()
        )

    @dp.message(Form.waiting_delete)
    async def process_delete(message: Message, state: FSMContext):
        text = message.text.strip()
        try:
            idx = int(text) - 1
        except:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞!")
            return
        skins = load_skins()
        if 0 <= idx < len(skins):
            deleted = skins.pop(idx)
            save_skins(skins)
            await message.answer(
                f"‚úÖ –°–∫–∏–Ω —É–¥–∞–ª—ë–Ω:\n{deleted[0]} ‚Äî float {deleted[1]}-{deleted[2]}"
            )
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
        await state.clear()